import java.util.Scanner;
public class BelmanFord
{
private int dest[];
private int n;
public static final int max_value=99;
public BelmanFord(int n)
{
this.n=n;
dest=new int[n+1];
}
public void Ford(int source,int a[][])
{
for(int node=1;node<=n;node++)
{
dest[node]=max_value;
}
dest[source]=0;
for(int node=1;node<=n-1;node++)
{
for(int i=1;i<=n;i++)
{
for(int j=1;j<=n;j++)
{
if(a[i][j]!=max_value)
{
if(dest[j]>dest[i]+a[i][j])
{
dest[j]=dest[i]+a[i][j];
}
}
}
}
}
for(int i=1;i<=n;i++)
{
for(int j=1;j<=n;j++)
{
if(a[i][j]!=max_value)
{
if(dest[j]>dest[i]+a[i][j])
{
System.out.println("Graph contains negative edge cycle");
}
}
}
}
for(int vertex=1;vertex<=n;vertex++)
{
System.out.println("Distance of source "+source+" to "+vertex+" is "+dest[vertex]);
}

}
public static void main(String args[])
{
int i,j;
Scanner scan=new Scanner(System.in);
System.out.println("Enter the number of nodes:");
int n=scan.nextInt();
int max_value=99;
int a[][]=new int[n+1][n+1];
int dest[]=new int[n];
System.out.println("Enter the weighted adjacency matrix:");
for(i=1;i<=n;i++)
{
for(j=1;j<=n;j++)
{
a[i][j]=scan.nextInt();
if(i==j)
{
a[i][j]=0;
continue;
}
if(a[i][j]==0)
{
a[i][j]=max_value;
}
}

}
System.out.println("Enter the source vertex");
int source=scan.nextInt();
BelmanFord bf=new BelmanFord(n);
bf.Ford(source,a);
}
}
